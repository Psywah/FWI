//commet
include "getARGV.idp"
int debug =getARGV("-debug",1);

// Problem parameters               // Omega = unit square
real freq = getARGV("-freq",10);    // frequency
func f = 0;                         // source function
real d1= sqrt(1./2), d2=sqrt(1./2); // direction of incomming wave
func Nx = N.x;
func Ny = N.y;
func gn = 1i*freq*(d1*Nx+d2*Ny -1)*exp(1i*freq*(d1*x+d2*y)); // Robin BC
func g = exp(1i*freq*(d1*x+d2*y));                     // Dirichlet BC

func mfun = 1;
mesh Thm = square(5, 5, flags=1);
fespace Ph(Thm,P0);
Ph mFEfun1 = mfun;

// Boundary conditions
int Dirichlet = 1;
int Robin = 2;
int[int] chlab=[1, Robin, 2, Robin, 3, Robin, 4, Robin];

// Create mesh and function space
real h = freq^(-1.25);
int Nnode = ceil(1./h);
mesh Th = square(Nnode, Nnode, flags=1);
Th = change(Th,refe=chlab);
fespace Vh(Th,P2);        // P2 fem space


Vh<complex> w;
include "forward-solver.idp"
w[] = forwardSolver(mFEfun1[]);
Vh wReal;
wReal[] = w[].re;

plot(wReal,cmm="real part of solution",wait=debug,fill=1);
